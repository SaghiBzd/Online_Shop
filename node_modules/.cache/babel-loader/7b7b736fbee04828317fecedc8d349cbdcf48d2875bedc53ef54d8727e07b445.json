{"ast":null,"code":"var _jsxFileName = \"S:\\\\L E A R N I N G\\\\Computer Science\\\\Programming\\\\Front End\\\\Course 5 (React)\\\\Project\\\\Online Shop\\\\src\\\\store\\\\CartContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useState, useContext } from 'react';\n\n// Define the Cart Item type with quantity\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext(undefined);\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cart, setCart] = useState([]);\n\n  // Add product to cart or increase quantity if it already exists\n  const addToCart = product => {\n    setCart(prev => {\n      const existingProduct = prev.find(item => item.id === product.id);\n      if (existingProduct) {\n        return prev.map(item => item.id === product.id ? {\n          ...item,\n          quantity: item.quantity + 1\n        } : item);\n      }\n      return [...prev, {\n        ...product,\n        quantity: 1\n      }];\n    });\n  };\n\n  // Remove product from cart\n  const removeFromCart = id => {\n    setCart(prev => prev.filter(item => item.id !== id));\n  };\n\n  // Increase quantity of a product\n  const increaseQuantity = id => {\n    setCart(prev => prev.map(item => item.id === id ? {\n      ...item,\n      quantity: item.quantity + 1\n    } : item));\n  };\n\n  // Decrease quantity of a product (and remove if quantity reaches 0)\n  const decreaseQuantity = id => {\n    setCart(prev => prev.map(item => item.id === id && item.quantity > 1 ? {\n      ...item,\n      quantity: item.quantity - 1\n    } : item).filter(item => item.quantity > 0) // Remove items with 0 quantity\n    );\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addToCart,\n      removeFromCart,\n      increaseQuantity,\n      decreaseQuantity\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use CartContext\n_s(CartProvider, \"ZqFaEIYkzI5UoYUmTgmqHbYYm/0=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (!context) throw new Error('useCart must be used within a CartProvider');\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useState","useContext","jsxDEV","_jsxDEV","CartContext","undefined","CartProvider","children","_s","cart","setCart","addToCart","product","prev","existingProduct","find","item","id","map","quantity","removeFromCart","filter","increaseQuantity","decreaseQuantity","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","Error","$RefreshReg$"],"sources":["S:/L E A R N I N G/Computer Science/Programming/Front End/Course 5 (React)/Project/Online Shop/src/store/CartContext.tsx"],"sourcesContent":["import { createContext, useState, useContext, ReactNode } from 'react';\r\nimport Product from '../Types/productType';\r\n\r\n// Define the Cart Item type with quantity\r\ntype CartItem = Product & { quantity: number };\r\n\r\ntype CartContextType = {\r\n  cart: CartItem[];\r\n  addToCart: (product: Product) => void;\r\n  removeFromCart: (id: number) => void;\r\n  increaseQuantity: (id: number) => void;\r\n  decreaseQuantity: (id: number) => void;\r\n};\r\n\r\nconst CartContext = createContext<CartContextType | undefined>(undefined);\r\n\r\nexport const CartProvider = ({ children }: { children: ReactNode }) => {\r\n  const [cart, setCart] = useState<CartItem[]>([]);\r\n\r\n  // Add product to cart or increase quantity if it already exists\r\n  const addToCart = (product: Product) => {\r\n    setCart((prev) => {\r\n      const existingProduct = prev.find((item) => item.id === product.id);\r\n      if (existingProduct) {\r\n        return prev.map((item) =>\r\n          item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item\r\n        );\r\n      }\r\n      return [...prev, { ...product, quantity: 1 }];\r\n    });\r\n  };\r\n\r\n  // Remove product from cart\r\n  const removeFromCart = (id: number) => {\r\n    setCart((prev) => prev.filter((item) => item.id !== id));\r\n  };\r\n\r\n  // Increase quantity of a product\r\n  const increaseQuantity = (id: number) => {\r\n    setCart((prev) =>\r\n      prev.map((item) =>\r\n        item.id === id ? { ...item, quantity: item.quantity + 1 } : item\r\n      )\r\n    );\r\n  };\r\n\r\n  // Decrease quantity of a product (and remove if quantity reaches 0)\r\n  const decreaseQuantity = (id: number) => {\r\n    setCart((prev) =>\r\n      prev\r\n        .map((item) =>\r\n          item.id === id && item.quantity > 1\r\n            ? { ...item, quantity: item.quantity - 1 }\r\n            : item\r\n        )\r\n        .filter((item) => item.quantity > 0) // Remove items with 0 quantity\r\n    );\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={{ cart, addToCart, removeFromCart, increaseQuantity, decreaseQuantity }}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use CartContext\r\nexport const useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (!context) throw new Error('useCart must be used within a CartProvider');\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAmB,OAAO;;AAGtE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAWA,MAAMC,WAAW,gBAAGL,aAAa,CAA8BM,SAAS,CAAC;AAEzE,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAkC,CAAC,KAAK;EAAAC,EAAA;EACrE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAa,EAAE,CAAC;;EAEhD;EACA,MAAMW,SAAS,GAAIC,OAAgB,IAAK;IACtCF,OAAO,CAAEG,IAAI,IAAK;MAChB,MAAMC,eAAe,GAAGD,IAAI,CAACE,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC;MACnE,IAAIH,eAAe,EAAE;QACnB,OAAOD,IAAI,CAACK,GAAG,CAAEF,IAAI,IACnBA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,GAAG;UAAE,GAAGD,IAAI;UAAEG,QAAQ,EAAEH,IAAI,CAACG,QAAQ,GAAG;QAAE,CAAC,GAAGH,IACtE,CAAC;MACH;MACA,OAAO,CAAC,GAAGH,IAAI,EAAE;QAAE,GAAGD,OAAO;QAAEO,QAAQ,EAAE;MAAE,CAAC,CAAC;IAC/C,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMC,cAAc,GAAIH,EAAU,IAAK;IACrCP,OAAO,CAAEG,IAAI,IAAKA,IAAI,CAACQ,MAAM,CAAEL,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC,CAAC;EAC1D,CAAC;;EAED;EACA,MAAMK,gBAAgB,GAAIL,EAAU,IAAK;IACvCP,OAAO,CAAEG,IAAI,IACXA,IAAI,CAACK,GAAG,CAAEF,IAAI,IACZA,IAAI,CAACC,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGD,IAAI;MAAEG,QAAQ,EAAEH,IAAI,CAACG,QAAQ,GAAG;IAAE,CAAC,GAAGH,IAC9D,CACF,CAAC;EACH,CAAC;;EAED;EACA,MAAMO,gBAAgB,GAAIN,EAAU,IAAK;IACvCP,OAAO,CAAEG,IAAI,IACXA,IAAI,CACDK,GAAG,CAAEF,IAAI,IACRA,IAAI,CAACC,EAAE,KAAKA,EAAE,IAAID,IAAI,CAACG,QAAQ,GAAG,CAAC,GAC/B;MAAE,GAAGH,IAAI;MAAEG,QAAQ,EAAEH,IAAI,CAACG,QAAQ,GAAG;IAAE,CAAC,GACxCH,IACN,CAAC,CACAK,MAAM,CAAEL,IAAI,IAAKA,IAAI,CAACG,QAAQ,GAAG,CAAC,CAAC,CAAC;IACzC,CAAC;EACH,CAAC;EAED,oBACEhB,OAAA,CAACC,WAAW,CAACoB,QAAQ;IAACC,KAAK,EAAE;MAAEhB,IAAI;MAAEE,SAAS;MAAES,cAAc;MAAEE,gBAAgB;MAAEC;IAAiB,CAAE;IAAAhB,QAAA,EAClGA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAArB,EAAA,CAlDaF,YAAY;AAAAwB,EAAA,GAAZxB,YAAY;AAmDzB,OAAO,MAAMyB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGhC,UAAU,CAACG,WAAW,CAAC;EACvC,IAAI,CAAC6B,OAAO,EAAE,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC3E,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CAJWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}